apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

ext{
    debug_versioncode = 6
    debug_versionname = "beta-0.1.6"
    debug_minifyEnabled = false
    release_versioncode = 1
    release_versionname = "release-1.0.0"
//    buildType = "release"
    buildType = "debug"
}

def getBuildType() {
    return ext.buildType
}

def releaseTime() {
    return new Date().format("yyyyMMdd_HHmmss", TimeZone.getTimeZone("GMT+08:00"))
}

def getMyVersionCode() {
    return "debug".equals(ext.buildType) ? ext.debug_versioncode : ext.release_versioncode
}

def getMyVersionName() {
    return "debug".equals(ext.buildType) ? ext.debug_versionname : ext.release_versionname
}

def getDebugMinifyEnabled() {
    return ext.debug_minifyEnabled
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "net.zentring.live"
        minSdkVersion 29
        targetSdkVersion 30
        versionCode getMyVersionCode()
        versionName getMyVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def fileName = ""
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if (variant.buildType.name.equals('release')) {
                    fileName = "live_${defaultConfig.versionName}_${releaseTime()}.apk"
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "live_${defaultConfig.versionName}_${releaseTime()}.apk"
                }
                output.outputFileName = fileName
            }
        }
    }
}

allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation project(':videotrimmer')
    implementation 'com.github.MasayukiSuda:Mp4Composer-android:v0.4.0'
    implementation 'com.github.pedroSG94.rtmp-rtsp-stream-client-java:rtplibrary:1.8.4'
    implementation 'com.android.volley:volley:1.1.1'
    implementation 'com.github.yangjie10930:EpMedia:v0.9.5'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    //瀑布标签
    implementation 'com.github.VolleyCN.Android-FlowLayout:library:1.0.2'
    implementation 'com.google.code.gson:gson:2.8.6'
    //等待框动画用
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'org.xutils:xutils:3.5.1'
}